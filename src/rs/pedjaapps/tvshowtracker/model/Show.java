package rs.pedjaapps.tvshowtracker.model;

import java.util.List;
import rs.pedjaapps.tvshowtracker.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table SHOW.
 */
public class Show {

    private Long id;
    private int tvdb_id;
    private String title;
    private Integer year;
    private String url;
    private Long first_aired;
    private String country;
    private String overview;
    private Integer runtime;
    private String status;
    private String network;
    private String air_day;
    private String air_time;
    private String certification;
    private String imdb_id;
    private Integer tvrage_id;
    private Long last_updated;
    private Integer rating;
    private Integer votes;
    private Integer loved;
    private Integer hated;
    private Long image_id;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ShowDao myDao;

    private Image image;
    private Long image__resolvedKey;

    private List<Actor> actors;
    private List<Genre> genres;
    private List<Episode> episodes;

    // KEEP FIELDS - put your custom fields here
    private int watchedPercent;
    private long nextEpisodeHours;
    // KEEP FIELDS END

    public Show() {
    }

    public Show(Long id) {
        this.id = id;
    }

    public Show(Long id, int tvdb_id, String title, Integer year, String url, Long first_aired, String country, String overview, Integer runtime, String status, String network, String air_day, String air_time, String certification, String imdb_id, Integer tvrage_id, Long last_updated, Integer rating, Integer votes, Integer loved, Integer hated, Long image_id) {
        this.id = id;
        this.tvdb_id = tvdb_id;
        this.title = title;
        this.year = year;
        this.url = url;
        this.first_aired = first_aired;
        this.country = country;
        this.overview = overview;
        this.runtime = runtime;
        this.status = status;
        this.network = network;
        this.air_day = air_day;
        this.air_time = air_time;
        this.certification = certification;
        this.imdb_id = imdb_id;
        this.tvrage_id = tvrage_id;
        this.last_updated = last_updated;
        this.rating = rating;
        this.votes = votes;
        this.loved = loved;
        this.hated = hated;
        this.image_id = image_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getShowDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getTvdb_id() {
        return tvdb_id;
    }

    public void setTvdb_id(int tvdb_id) {
        this.tvdb_id = tvdb_id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        this.title = title;
    }

    public Integer getYear() {
        return year;
    }

    public void setYear(Integer year) {
        this.year = year;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public Long getFirst_aired() {
        return first_aired;
    }

    public void setFirst_aired(Long first_aired) {
        this.first_aired = first_aired;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getOverview() {
        return overview;
    }

    public void setOverview(String overview) {
        this.overview = overview;
    }

    public Integer getRuntime() {
        return runtime;
    }

    public void setRuntime(Integer runtime) {
        this.runtime = runtime;
    }

    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public String getNetwork() {
        return network;
    }

    public void setNetwork(String network) {
        this.network = network;
    }

    public String getAir_day() {
        return air_day;
    }

    public void setAir_day(String air_day) {
        this.air_day = air_day;
    }

    public String getAir_time() {
        return air_time;
    }

    public void setAir_time(String air_time) {
        this.air_time = air_time;
    }

    public String getCertification() {
        return certification;
    }

    public void setCertification(String certification) {
        this.certification = certification;
    }

    public String getImdb_id() {
        return imdb_id;
    }

    public void setImdb_id(String imdb_id) {
        this.imdb_id = imdb_id;
    }

    public Integer getTvrage_id() {
        return tvrage_id;
    }

    public void setTvrage_id(Integer tvrage_id) {
        this.tvrage_id = tvrage_id;
    }

    public Long getLast_updated() {
        return last_updated;
    }

    public void setLast_updated(Long last_updated) {
        this.last_updated = last_updated;
    }

    public Integer getRating() {
        return rating;
    }

    public void setRating(Integer rating) {
        this.rating = rating;
    }

    public Integer getVotes() {
        return votes;
    }

    public void setVotes(Integer votes) {
        this.votes = votes;
    }

    public Integer getLoved() {
        return loved;
    }

    public void setLoved(Integer loved) {
        this.loved = loved;
    }

    public Integer getHated() {
        return hated;
    }

    public void setHated(Integer hated) {
        this.hated = hated;
    }

    public Long getImage_id() {
        return image_id;
    }

    public void setImage_id(Long image_id) {
        this.image_id = image_id;
    }

    /** To-one relationship, resolved on first access. */
    public Image getImage() {
        Long __key = this.image_id;
        if (image__resolvedKey == null || !image__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ImageDao targetDao = daoSession.getImageDao();
            Image imageNew = targetDao.load(__key);
            synchronized (this) {
                image = imageNew;
            	image__resolvedKey = __key;
            }
        }
        return image;
    }

    public void setImage(Image image) {
        synchronized (this) {
            this.image = image;
            image_id = image == null ? null : image.getId();
            image__resolvedKey = image_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Actor> getActors() {
        if (actors == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ActorDao targetDao = daoSession.getActorDao();
            List<Actor> actorsNew = targetDao._queryShow_Actors(id);
            synchronized (this) {
                if(actors == null) {
                    actors = actorsNew;
                }
            }
        }
        return actors;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetActors() {
        actors = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Genre> getGenres() {
        if (genres == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GenreDao targetDao = daoSession.getGenreDao();
            List<Genre> genresNew = targetDao._queryShow_Genres(id);
            synchronized (this) {
                if(genres == null) {
                    genres = genresNew;
                }
            }
        }
        return genres;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetGenres() {
        genres = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Episode> getEpisodes() {
        if (episodes == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            EpisodeDao targetDao = daoSession.getEpisodeDao();
            List<Episode> episodesNew = targetDao._queryShow_Episodes(id);
            synchronized (this) {
                if(episodes == null) {
                    episodes = episodesNew;
                }
            }
        }
        return episodes;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetEpisodes() {
        episodes = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here

    public int getWatchedPercent()
    {
        return watchedPercent;
    }

    public void setWatchedPercent(int watchedPercent)
    {
        this.watchedPercent = watchedPercent;
    }

    public long getNextEpisodeHours()
    {
        return nextEpisodeHours;
    }

    public void setNextEpisodeHours(long nextEpisodeHours)
    {
        this.nextEpisodeHours = nextEpisodeHours;
    }
    // KEEP METHODS END

}
