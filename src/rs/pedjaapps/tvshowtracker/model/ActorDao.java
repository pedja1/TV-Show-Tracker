package rs.pedjaapps.tvshowtracker.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import rs.pedjaapps.tvshowtracker.model.Actor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ACTOR.
*/
public class ActorDao extends AbstractDao<Actor, Long> {

    public static final String TABLENAME = "ACTOR";

    /**
     * Properties of entity Actor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Character = new Property(2, String.class, "character", false, "CHARACTER");
        public final static Property Image = new Property(3, String.class, "image", false, "IMAGE");
        public final static Property Show_id = new Property(4, long.class, "show_id", false, "SHOW_ID");
    };

    private Query<Actor> show_ActorsQuery;

    public ActorDao(DaoConfig config) {
        super(config);
    }
    
    public ActorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ACTOR' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'CHARACTER' TEXT," + // 2: character
                "'IMAGE' TEXT," + // 3: image
                "'SHOW_ID' INTEGER NOT NULL );"); // 4: show_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ACTOR'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Actor entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String character = entity.getCharacter();
        if (character != null) {
            stmt.bindString(3, character);
        }
 
        String image = entity.getImage();
        if (image != null) {
            stmt.bindString(4, image);
        }
        stmt.bindLong(5, entity.getShow_id());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Actor readEntity(Cursor cursor, int offset) {
        Actor entity = new Actor( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // character
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // image
            cursor.getLong(offset + 4) // show_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Actor entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCharacter(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setImage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setShow_id(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Actor entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Actor entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "actors" to-many relationship of Show. */
    public List<Actor> _queryShow_Actors(long show_id) {
        synchronized (this) {
            if (show_ActorsQuery == null) {
                QueryBuilder<Actor> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Show_id.eq(null));
                show_ActorsQuery = queryBuilder.build();
            }
        }
        Query<Actor> query = show_ActorsQuery.forCurrentThread();
        query.setParameter(0, show_id);
        return query.list();
    }

}
