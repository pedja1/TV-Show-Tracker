package rs.pedjaapps.tvshowtracker.model;

import java.util.List;
import rs.pedjaapps.tvshowtracker.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table USER.
 */
public class User {

    /** Not-null value. */
    private String username;
    private String full_name;
    private String gender;
    private Integer age;
    private String location;
    private String about;
    private Long joined;
    private Long last_login;
    private String avatar;
    private String url;
    private String share_text_watched;
    private String share_text_watching;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Show> shows;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(String username) {
        this.username = username;
    }

    public User(String username, String full_name, String gender, Integer age, String location, String about, Long joined, Long last_login, String avatar, String url, String share_text_watched, String share_text_watching) {
        this.username = username;
        this.full_name = full_name;
        this.gender = gender;
        this.age = age;
        this.location = location;
        this.about = about;
        this.joined = joined;
        this.last_login = last_login;
        this.avatar = avatar;
        this.url = url;
        this.share_text_watched = share_text_watched;
        this.share_text_watching = share_text_watching;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    /** Not-null value. */
    public String getUsername() {
        return username;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUsername(String username) {
        this.username = username;
    }

    public String getFull_name() {
        return full_name;
    }

    public void setFull_name(String full_name) {
        this.full_name = full_name;
    }

    public String getGender() {
        return gender;
    }

    public void setGender(String gender) {
        this.gender = gender;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public String getAbout() {
        return about;
    }

    public void setAbout(String about) {
        this.about = about;
    }

    public Long getJoined() {
        return joined;
    }

    public void setJoined(Long joined) {
        this.joined = joined;
    }

    public Long getLast_login() {
        return last_login;
    }

    public void setLast_login(Long last_login) {
        this.last_login = last_login;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public String getUrl() {
        return url;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public String getShare_text_watched() {
        return share_text_watched;
    }

    public void setShare_text_watched(String share_text_watched) {
        this.share_text_watched = share_text_watched;
    }

    public String getShare_text_watching() {
        return share_text_watching;
    }

    public void setShare_text_watching(String share_text_watching) {
        this.share_text_watching = share_text_watching;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Show> getShows() {
        if (shows == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ShowDao targetDao = daoSession.getShowDao();
            List<Show> showsNew = targetDao._queryUser_Shows(username);
            synchronized (this) {
                if(shows == null) {
                    shows = showsNew;
                }
            }
        }
        return shows;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetShows() {
        shows = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
