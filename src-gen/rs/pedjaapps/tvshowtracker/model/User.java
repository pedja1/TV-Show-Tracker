package rs.pedjaapps.tvshowtracker.model;

import java.util.List;
import rs.pedjaapps.tvshowtracker.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
import android.os.Parcelable;
// KEEP INCLUDES END
/**
 * Entity mapped to table USER.
 */
public class User {

    private long id;
    /** Not-null value. */
    private String email;
    /** Not-null value. */
    private String password;
    private String avatar;
    private String first_name;
    private String last_name;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserDao myDao;

    private List<Show> shows;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public User() {
    }

    public User(long id) {
        this.id = id;
    }

    public User(long id, String email, String password, String avatar, String first_name, String last_name) {
        this.id = id;
        this.email = email;
        this.password = password;
        this.avatar = avatar;
        this.first_name = first_name;
        this.last_name = last_name;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getEmail() {
        return email;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setEmail(String email) {
        this.email = email;
    }

    /** Not-null value. */
    public String getPassword() {
        return password;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPassword(String password) {
        this.password = password;
    }

    public String getAvatar() {
        return avatar;
    }

    public void setAvatar(String avatar) {
        this.avatar = avatar;
    }

    public String getFirst_name() {
        return first_name;
    }

    public void setFirst_name(String first_name) {
        this.first_name = first_name;
    }

    public String getLast_name() {
        return last_name;
    }

    public void setLast_name(String last_name) {
        this.last_name = last_name;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Show> getShows() {
        if (shows == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ShowDao targetDao = daoSession.getShowDao();
            List<Show> showsNew = targetDao._queryUser_Shows(id);
            synchronized (this) {
                if(shows == null) {
                    shows = showsNew;
                }
            }
        }
        return shows;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetShows() {
        shows = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
