package rs.pedjaapps.trakttvandroid;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import rs.pedjaapps.trakttvandroid.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table user.
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "user";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Full_name = new Property(2, String.class, "full_name", false, "FULL_NAME");
        public final static Property Gender = new Property(3, String.class, "gender", false, "GENDER");
        public final static Property Age = new Property(4, String.class, "age", false, "AGE");
        public final static Property Location = new Property(5, String.class, "location", false, "LOCATION");
        public final static Property About = new Property(6, String.class, "about", false, "ABOUT");
        public final static Property Joined = new Property(7, Long.class, "joined", false, "JOINED");
        public final static Property Last_login = new Property(8, Long.class, "last_login", false, "LAST_LOGIN");
        public final static Property Avatar = new Property(9, String.class, "avatar", false, "AVATAR");
        public final static Property Url = new Property(10, String.class, "url", false, "URL");
        public final static Property Vip = new Property(11, Boolean.class, "vip", false, "VIP");
        public final static Property Timezone = new Property(12, String.class, "timezone", false, "TIMEZONE");
        public final static Property Use_24 = new Property(13, Boolean.class, "use_24", false, "USE_24");
        public final static Property Protected = new Property(14, Boolean.class, "protected", false, "PROTECTED");
        public final static Property Ratings_mode = new Property(15, String.class, "ratings_mode", false, "RATINGS_MODE");
        public final static Property Show_badges = new Property(16, Boolean.class, "show_badges", false, "SHOW_BADGES");
        public final static Property Show_spoilers = new Property(17, Boolean.class, "show_spoilers", false, "SHOW_SPOILERS");
        public final static Property Watching = new Property(18, String.class, "watching", false, "WATCHING");
        public final static Property Watched = new Property(19, String.class, "watched", false, "WATCHED");
        public final static Property UserId = new Property(20, long.class, "userId", false, "USER_ID");
    };

    private Query<User> connection_UserListQuery;

    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'user' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'USERNAME' TEXT NOT NULL ," + // 1: username
                "'FULL_NAME' TEXT," + // 2: full_name
                "'GENDER' TEXT," + // 3: gender
                "'AGE' TEXT," + // 4: age
                "'LOCATION' TEXT," + // 5: location
                "'ABOUT' TEXT," + // 6: about
                "'JOINED' INTEGER," + // 7: joined
                "'LAST_LOGIN' INTEGER," + // 8: last_login
                "'AVATAR' TEXT," + // 9: avatar
                "'URL' TEXT," + // 10: url
                "'VIP' INTEGER," + // 11: vip
                "'TIMEZONE' TEXT," + // 12: timezone
                "'USE_24' INTEGER," + // 13: use_24
                "'PROTECTED' INTEGER," + // 14: protected
                "'RATINGS_MODE' TEXT," + // 15: ratings_mode
                "'SHOW_BADGES' INTEGER," + // 16: show_badges
                "'SHOW_SPOILERS' INTEGER," + // 17: show_spoilers
                "'WATCHING' TEXT," + // 18: watching
                "'WATCHED' TEXT," + // 19: watched
                "'USER_ID' INTEGER NOT NULL );"); // 20: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'user'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUsername());
 
        String full_name = entity.getFull_name();
        if (full_name != null) {
            stmt.bindString(3, full_name);
        }
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
 
        String age = entity.getAge();
        if (age != null) {
            stmt.bindString(5, age);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(6, location);
        }
 
        String about = entity.getAbout();
        if (about != null) {
            stmt.bindString(7, about);
        }
 
        Long joined = entity.getJoined();
        if (joined != null) {
            stmt.bindLong(8, joined);
        }
 
        Long last_login = entity.getLast_login();
        if (last_login != null) {
            stmt.bindLong(9, last_login);
        }
 
        String avatar = entity.getAvatar();
        if (avatar != null) {
            stmt.bindString(10, avatar);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(11, url);
        }
 
        Boolean vip = entity.getVip();
        if (vip != null) {
            stmt.bindLong(12, vip ? 1l: 0l);
        }
 
        String timezone = entity.getTimezone();
        if (timezone != null) {
            stmt.bindString(13, timezone);
        }
 
        Boolean use_24 = entity.getUse_24();
        if (use_24 != null) {
            stmt.bindLong(14, use_24 ? 1l: 0l);
        }
 
        Boolean protected = entity.getProtected();
        if (protected != null) {
            stmt.bindLong(15, protected ? 1l: 0l);
        }
 
        String ratings_mode = entity.getRatings_mode();
        if (ratings_mode != null) {
            stmt.bindString(16, ratings_mode);
        }
 
        Boolean show_badges = entity.getShow_badges();
        if (show_badges != null) {
            stmt.bindLong(17, show_badges ? 1l: 0l);
        }
 
        Boolean show_spoilers = entity.getShow_spoilers();
        if (show_spoilers != null) {
            stmt.bindLong(18, show_spoilers ? 1l: 0l);
        }
 
        String watching = entity.getWatching();
        if (watching != null) {
            stmt.bindString(19, watching);
        }
 
        String watched = entity.getWatched();
        if (watched != null) {
            stmt.bindString(20, watched);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // full_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // gender
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // age
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // location
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // about
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // joined
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // last_login
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // avatar
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // url
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // vip
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // timezone
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // use_24
            cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0, // protected
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // ratings_mode
            cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0, // show_badges
            cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0, // show_spoilers
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // watching
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // watched
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.getString(offset + 1));
        entity.setFull_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setAge(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAbout(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setJoined(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setLast_login(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setAvatar(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setVip(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setTimezone(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setUse_24(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setProtected(cursor.isNull(offset + 14) ? null : cursor.getShort(offset + 14) != 0);
        entity.setRatings_mode(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setShow_badges(cursor.isNull(offset + 16) ? null : cursor.getShort(offset + 16) != 0);
        entity.setShow_spoilers(cursor.isNull(offset + 17) ? null : cursor.getShort(offset + 17) != 0);
        entity.setWatching(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setWatched(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "userList" to-many relationship of Connection. */
    public List<User> _queryConnection_UserList(long userId) {
        synchronized (this) {
            if (connection_UserListQuery == null) {
                QueryBuilder<User> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                connection_UserListQuery = queryBuilder.build();
            }
        }
        Query<User> query = connection_UserListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
